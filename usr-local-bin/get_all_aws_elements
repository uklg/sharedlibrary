#!/usr/bin/python3

import os

os.system('pip3 install boto3')


import boto3
from botocore.config import Config
import pprint



CHECK = "running"


def available_regions(service):
    regions = []
    client = boto3.client(service)
    response = client.describe_regions()

    for item in response["Regions"]:
        regions.append(item["RegionName"])

    return regions


def main(type='instance'):
    print("checking type: %s" % type)
    print(f"Check for status: {CHECK}")
    regions = available_regions("ec2")

    # Check status of EC2 in each region
    cnt = 0
    for region in regions:

        # Change regions with config
        my_config = Config(region_name=region)
        client = boto3.client("ec2", config=my_config)
        if type ==  'nat_gateway':
            response = client.describe_nat_gateways()
        if type == 'instance':
            response = client.describe_instances()
            
            
            for r in response["Reservations"]:
                status = r["Instances"][0]["State"]["Name"]
                if status == "running":
                    instance_id = r["Instances"][0]["InstanceId"]
                    instance_type = r["Instances"][0]["InstanceType"]
                    az = r["Instances"][0]["Placement"]["AvailabilityZone"]
                    print(f"id: {instance_id}, type: {instance_type}, az: {az}")
                    cnt += 1


        if type ==  'nat_gateway':
            response = client.describe_nat_gateways()
            #for r in response['ResponseMetadata']:
            for r in response['NatGateways']:
                 
                if 'CreateTime' in r.keys():
                  print(r['State'])
                 
                #pprint.pprint(r)
                print(r)
                #type(r)
                #print(r['NatGateways'])
                #print(type(r))

            print('---')
            #pprint.pprint(response)


    if cnt == 1:
        print(f"{cnt} instance is {CHECK}!")
    elif cnt > 1:
        print(f"{cnt} instances are {CHECK}!")
    else:
        print(f"No instance is {CHECK}!")


if __name__ == "__main__":
#    main()
    main('nat_gateway')

# todo make it check non running
# add in extra things to check like subnets and elbs
